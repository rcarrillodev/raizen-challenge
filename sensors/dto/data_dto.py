# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from sensors.dto.base_model_ import Model
from sensors import util


class Data(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, time=None, temp=None, co2=None, humidity=None):  # noqa: E501
        """Data - a model defined in OpenAPI

        :param time: The time of this Data.  # noqa: E501
        :type time: datetime
        :param temp: The temp of this Data.  # noqa: E501
        :type temp: float
        :param co2: The co2 of this Data.  # noqa: E501
        :type co2: float
        :param humidity: The humidity of this Data.  # noqa: E501
        :type humidity: float
        """
        self.openapi_types = {
            'time': datetime,
            'temp': float,
            'co2': float,
            'humidity': float
        }

        self.attribute_map = {
            'time': 'time',
            'temp': 'temp',
            'co2': 'co2',
            'humidity': 'humidity'
        }

        self._time = time
        self._temp = temp
        self._co2 = co2
        self._humidity = humidity

    @classmethod
    def from_dict(cls, dikt) -> 'Data':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Data of this Data.  # noqa: E501
        :rtype: Data
        """
        return util.deserialize_model(dikt, cls)

    @property
    def time(self):
        """Gets the time of this Data.


        :return: The time of this Data.
        :rtype: datetime
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this Data.


        :param time: The time of this Data.
        :type time: datetime
        """

        self._time = time

    @property
    def temp(self):
        """Gets the temp of this Data.


        :return: The temp of this Data.
        :rtype: float
        """
        return self._temp

    @temp.setter
    def temp(self, temp):
        """Sets the temp of this Data.


        :param temp: The temp of this Data.
        :type temp: float
        """

        self._temp = temp

    @property
    def co2(self):
        """Gets the co2 of this Data.


        :return: The co2 of this Data.
        :rtype: float
        """
        return self._co2

    @co2.setter
    def co2(self, co2):
        """Sets the co2 of this Data.


        :param co2: The co2 of this Data.
        :type co2: float
        """

        self._co2 = co2

    @property
    def humidity(self):
        """Gets the humidity of this Data.


        :return: The humidity of this Data.
        :rtype: float
        """
        return self._humidity

    @humidity.setter
    def humidity(self, humidity):
        """Sets the humidity of this Data.


        :param humidity: The humidity of this Data.
        :type humidity: float
        """

        self._humidity = humidity
